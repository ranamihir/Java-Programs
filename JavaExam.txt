1)
class C{
static int s;

public static void main(String[] args){

C obj = new C();
obj.m1();
System.out.println(s);

}
void m1();
{

int x=1;
m2(x);
System.out.println(x+"");

}

void m2(int x){

x = x*2;
s = x;

} }

1.prints 1,2 -- ANSWER
2.prints 2,0
3.prints 2,2
4.Compile Time Error

2)
class A{

String as = name();

String name(){

return "A";

 }
}

class B extends A{

String as = super.as;

String name(){

return "B";

 }
}

public class Test{

public static void main(String[] args){

A a = new B();
System.out.println(a.as);

 }
}

1.Code will not compile
2.print A
3.print B -- ANSWER
4.print null

3)
class A{

int a;
int b;

void ab(A a){

a.a = 10;
a.b = 20;

System.out.println(this.a);
System.out.println(this.b);
a.cd(this);

}

void cd(A a){

A a1 = a;
a = null;
a1.a = a1.a + 40;
a1.b = a1.b + 50;

System.out.println(a1.a);
System.out.println(a1.b);

System.out.println(this.a);
System.out.println(this.b);

 }
}

public class Demo{

public static void main(String[] args){

  A a1 = new A();
  a1.a = 112;
  a1.b = 45;
  a1.ab(new A());
  
 }
}

1.112,45,152,95,10,20 -- ANSWER
2.NullPointerException
3.95,113,10,20,112,152
4.None of the above

4)
class ClassA {
public int numberOfInstances;
protected ClassA(int numberOfInstances) {
this.numberOfInstances = numberOfInstances;
}
}
 public class ExtendedA extends ClassA {
 private ExtendedA(int numberOfInstances) {
 super(numberOfInstances);
}
 public static void main(String[] args) {
 ExtendedA ext = new ExtendedA(420);
 System.out.print(ext.numberOfInstances);
 }
}

Which statement is true?
1. 420 is the output. -- ANSWER
2. An exception is thrown at runtime.
3. All constructors must be declared public.
4. Constructors CANNOT use the private modifier.
5. Constructors CANNOT use the protected modifier.

5)
public class Base {

public static String FOO = "foo";
public static void main(String[] args) {

Base b = new Base();
Sub s = new Sub();
System.out.print(Base.FOO);
System.out.print(Sub.FOO);
System.out.print(b.FOO);
System.out.print(s.FOO);
System.out.print(((Base) s).FOO);

}
}

class Sub extends Base {
public static String FOO = "bar";
}

What is the result?
1. foofoofoofoofoo
2. foobarfoobarbar
3. foobarfoofoofoo
4. foobarfoobarfoo -- ANSWER
5. barbarbarbarbar
6. foofoofoobarbar
7. foofoofoobarfoo

6)
 public class Car {
 private int wheelCount;
 private String vin;
 public Car(String vin){
 this.vin = vin;
 this.wheelCount = 4;
 }
 public String drive(){
return "zoom-zoom";
 }
 public String getInfo() {
 return "VIN: " + vin + " wheels: " + wheelCount;
 }
}
And
 public class MeGo extends Car {
 public MeGo(String vin) {
 this.wheelCount = 3;
 }
 }

What two must the programmer do to correct the compilation errors? (Choose two.)
1. insert a call to this() in the Car constructor -- ANSWER // See register for explanation
2. insert a call to this() in the MeGo constructor
3. insert a call to super() in the MeGo constructor
4. insert a call to super(vin) in the MeGo constructor -- ANSWER
5. change the wheelCount variable in Car to protected -- ANSWER
6. change line 3 in the MeGo class to super.wheelCount = 3;

7)
class Tag {
Tag(int marker) {
System.out.println("Tag(" + marker + ")");
}
}

class Card {
Tag t1 = new Tag(1);
Card() {
System.out.println("Card()");
t3 = new Tag(33); 
}
Tag t2 = new Tag(2); 
void f() {
System.out.println("f()");
}
Tag t3 = new Tag(3); 
}

public class OrderOfInitialization {

public static void main(String[] args) {
Card t = new Card();
 t.f(); 

 }
}

1.Compile Time Error
2.Runtime Error
3.Tag(1),Tag(2),Tag(3),Tag(33),Card(),f()
4.Tag(1),Tag(2),Tag(3),Card(),Tag(33),f() -- ANSWER

8)
class A{

int x = 10;
int y = 20;

A(){ System.out.println("A constructed"); }

void ab(A a){

System.out.println("ab(A a) called...");  
a.display();

 }

void display(){ System.out.println("A display()"); System.out.println(x); }

}

class B extends A{

int x = 30;

B(){ System.out.println("B constructed");  this.ab(new C()); }

void ab(B b){  System.out.println("ab(B b) called..."); super.ab(new B()); }

void display(){ System.out.println("B display()");  System.out.println(x); }

}

class C extends B{

int x = 50;

C(){ System.out.println("C constructed"); }

void ab(C c){  System.out.println("ab(C c) called...");  }

void display(){ System.out.println("C display()"); System.out.println(x); }

}

public class Main{

public static void main(String[] args){

A a = new B();
a.ab(new B());
a.ab(null);

 }
}

What will be the Output ?
